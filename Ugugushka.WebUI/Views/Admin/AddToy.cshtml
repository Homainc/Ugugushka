@model AddToyViewModel

<section class="card my-5">
    <div class="card-header">
        <h1>@ViewBag.ActionTitle</h1>
    </div>
    @using (Html.BeginForm("AddToy", "Admin", FormMethod.Post, htmlAttributes: new { @enctype = "multipart/form-data", @id = "form" }))
    {
        @Html.HiddenFor(x => x.Id)
        @foreach (var property in ViewData.ModelMetadata.Properties)
        {
            switch (property.PropertyName)
            {
                case "Id":
                case "Images":
                case "Cloudinary":
                    break;
                case "CategoryId":
                    <div class="form-group">
                        @Html.LabelFor(x => x.CategoryId, null, new { @class = "d-block mb-3" })
                        <div class="select-wrapper">
                            @Html.DropDownListFor(x => x.CategoryId, ViewBag.CategoriesList as SelectList, "Нет категории", new { @class = "form-control primary-select" })
                        </div>
                        @Html.ValidationMessageFor(x => x.CategoryId)
                    </div>
                    break;
                default:
                    <div class="form-group">
                    <label class="d-block mb-3" for="@property.PropertyName">@(property.DisplayName ?? property.PropertyName)</label>
                    @if (property.PropertyName == "Description")
                    {
                        @Html.TextArea(property.PropertyName, null, new { rows = 5, @class = "form-control text-input", @placeholder = property.DisplayName })
                    }
                    else if (property.PropertyName == "IsOnStock")
                    {
                        @Html.CheckBox(property.PropertyName)
                    }
                    else
                    {
                        @Html.TextBox(property.PropertyName, null, htmlAttributes: new { @class = "form-control text-input", @placeholder = property.DisplayName })
                    }
                    @Html.ValidationMessage(property.PropertyName)
                </div>
                    break;
            }
        }

        <div class="form-group">
            <label class="d-block mb-3">Фотографии</label>
            <div class="d-flex align-items-center">
                <div class="d-flex" id="images"></div>
                <label id="upload_btn" class="d-flex btn-upload-img" for="image">
                    <div id="plus_icon" class="d-flex upload-icon justify-content-center align-items-center">
                        <i class="fas fa-plus"></i>
                    </div>
                    <div id="loader" class="loader" style="display: none;"></div>
                </label>
                <input hidden type="file" name="image" id="image" accept="image/png, image/jpeg" multiple/>
            </div>
            <div id="upload_error_block" class="field-validation-error" style="display: none;"></div>
            @Html.ValidationMessageFor(x => x.Images)
        </div>

        <input type="submit" class="btn btn-turquoise mr-2" value="Сохранить" />
        @Html.ActionLink("Назад", "Toys", null, htmlAttributes: new { @class = "btn btn-secondary" })

        <div id="img_data"></div>
    }
</section>

@section PageScripts
{
    <script src="~/libs/jquery/jquery.min.js" type="text/javascript"></script>
    <script src="~/libs/jquery-validate/jquery.validate.min.js" type="text/javascript"></script>
    <script src="~/libs/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>
    <script>
        // Razor JS variables initialization
        const cloudPath = '@Model.Cloudinary.Api.UrlImgUp.Secure().BuildUrl()';
        var imgArray = [
            @foreach (var img in Model.Images.OrderByDescending(x => x.IsMain))
            {
                @: { publicId: '@img.PublicId', format: '@img.Format' },
            }
        ];
        var isUploadBtnHided = false;

        // DOM Elements
        const imgInputBlock = $('#img_data');
        const imgBlock = $("#images");
        const loader = $("#loader");
        const plusIcon = $("#plus_icon");
        const uploadBtn = $("#upload_btn");
        const uploadErrorBlock = $('#upload_error_block');

        $(document).ready(function() {
            updateImageArray();
            updateInputArray();
        });

        $("#image").on("change",
            function(e) {
                uploadImage();
            });

        function toggleUploading() {
            loader.toggle();
            loader.toggleClass('d-flex');
            plusIcon.toggle();
            plusIcon.toggleClass('d-flex');
        }

        function updateUploadBtn() {
            if (imgArray.length === 5 && !isUploadBtnHided) {
                uploadBtn.toggleClass('d-flex');
                uploadBtn.toggleClass('collapse');
                isUploadBtnHided = !isUploadBtnHided;
            } else if (imgArray.length < 5 && isUploadBtnHided) {
                uploadBtn.toggleClass('d-flex');
                uploadBtn.toggleClass('collapse');
                isUploadBtnHided = !isUploadBtnHided;
            }
        }

        function updateInputArray() {
            // Update input array
            imgInputBlock.html('');
            imgArray.forEach(function(item, index) {
                appendImageInput(item.publicId, item.format, index);
            });
        }

        function updateImageArray() {
            imgBlock.html('');
            imgArray.forEach(function(item, index) {
                appendImage(item.publicId, item.format, index);
            });
        }

        function appendImage(publicId, format, index) {
            const div = $("<div class='img-preview'></div>")
                .attr('data-index', index);
            $("<img class='d-flex mr-2' height='130' width='130'/>")
                .attr('src', `${cloudPath}/${publicId}.${format}`)
                .appendTo(div);
            $("<div class='img-menu'></div>")
                .append($("<i class='btn btn-secondary fas fa-arrow-left'></i>")
                    .on('click', onMoveImgLeft))
                .append($("<i class='btn btn-secondary fas fa-arrow-right'></i>")
                    .on('click', onMoveImgRight))
                .append($("<i class='btn btn-secondary fas fa-times'></i>")
                    .on('click', onDeleteImage))
                .appendTo(div);
            div.appendTo(imgBlock);
        }

        function onMoveImgLeft(e) {
            const elA = e.target.parentNode.parentNode;
            const index = parseInt(elA.dataset.index);
            const elB = $(`div.img-preview[data-index=${index - 1}]`)[0];

            if (!elB) return;

            elA.dataset.index = index - 1;
            elB.dataset.index = index;

            swapAImages(index, index - 1);
            elA.parentNode.insertBefore(elA, elB);
            updateInputArray();
        }

        function onMoveImgRight(e) {
            const elA = e.target.parentNode.parentNode;
            const index = parseInt(elA.dataset.index);
            console.log(index);
            const elB = $(`div.img-preview[data-index=${index + 1}]`)[0];

            if (!elB) return;

            elA.dataset.index = index + 1;
            elB.dataset.index = index;

            swapAImages(index, index + 1);
            elA.parentNode.insertBefore(elB, elA);
            updateInputArray();
        }

        function appendImageInput(publicId, format, index) {
            $(`<input type='hidden' name='Images[${index}].Format' id='Images[${index}]_Format'/>`)
                .val(format)
                .appendTo(imgInputBlock);
            $(`<input type='hidden' name='Images[${index}].PublicId' id='Images[${index}]_PublicId'/>`)
                .val(publicId)
                .appendTo(imgInputBlock);
        }

        function swapAImages(i, j) {
            const t = imgArray[i];
            imgArray[i] = imgArray[j];
            imgArray[j] = t;
        }

        function onDeleteImage(e) {
            const div = e.target.parentNode.parentNode;
            const i = div.dataset.index;

            div.remove();
            imgArray.splice(i, 1);
            updateInputArray();
            updateImageArray();
            updateUploadBtn();
        }

        function onUploadError(msg) {
            toggleUploading();
            uploadErrorBlock.toggle(true);
            uploadErrorBlock.text(msg);
        }

        function uploadImage() {
            const files = $("#image")[0].files;

            if (!files) return;

            toggleUploading();

            if (files.length > 5 - imgArray.length) {
                onUploadError('Максимально возможное количество фотографий - 5!');
                return;
            }

            const form = new FormData();
            for (let i = 0; i < files.length; i++) {
                form.append('images', files[i]);
                console.log('images', files[i]);
            }

            fetch('@Url.Action("UploadImages", "Image")',
                    {
                        method: 'POST',
                        body: form
                    })
                .then(r => {
                    if (r.ok) {
                        r.json().then(imgArr => {
                            imgArr.forEach(function(img) {
                                appendImage(img.publicId, img.format, imgArray.length);
                                appendImageInput(img.publicId, img.format, imgArray.length);
                                imgArray.push({ publicId: img.publicId, format: img.format });
                            });

                            toggleUploading();
                            updateUploadBtn();
                            uploadErrorBlock.toggle(false);
                        });
                    } else {
                        onUploadError(r.error);
                    }
                }).catch(onUploadError);
        }
    </script>
}
